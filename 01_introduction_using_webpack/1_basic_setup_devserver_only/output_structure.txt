└── ./
    └── index.html
    └── webpack.config.js
    └── package.json
    └── src/
        └── main.js
        └── App.js

Contents of index.html:

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Basic React App</title>
  </head>
  <body>
    <div id="root"></div>
    <!-- Root element where React will mount the app -->
    <script type="module" src="/src/main.js"></script>
  </body>
</html>


Contents of webpack.config.js:

// Import the 'path' module, which is a core Node.js module for working with file and directory paths.
const path = require("path");

// Import the 'HtmlWebpackPlugin', a plugin that simplifies the creation of HTML files to serve your bundles.
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  entry: "./src/main.js",
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "./src/main.js",
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ["@babel/preset-env", "@babel/preset-react"],
          },
        },
      },
    ],
  },
  // Define the plugins to be used by Webpack.
  plugins: [
    // Instantiate 'HtmlWebpackPlugin' with an options object.
    new HtmlWebpackPlugin({
      // Specify the template HTML file to be used as a base.
      template: "./index.html",
    }),
    /* 
      HtmlWebpackPlugin is a plugin that simplifies the creation of HTML files to serve your bundles.
      This plugin generates an HTML file, injects the output bundles, and writes this file to the output directory.
      The 'template' option specifies the path to the template HTML file. Webpack will use this template to generate
      the final HTML file, including references to the generated bundles (e.g., JavaScript and CSS files).
    */
  ],

  // Development server configuration
  devServer: {
    static: path.resolve(__dirname), // Serve from root where index.html is located
    compress: true, // Enable gzip compression
    port: 3000, // Port number for the server
  },
};


Contents of package.json:

{
  "name": "basic-setup",
  "version": "1.0.0",
  "scripts": {
    "dev": "webpack serve --mode development --open",
    "build": "webpack --mode production"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.24.7",
    "@babel/preset-env": "^7.24.7",
    "@babel/preset-react": "^7.24.7",
    "babel-loader": "^8.0.0",
    "webpack": "^5.95.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.1.0",
    "html-webpack-plugin": "^5.3.1"
  }
}


Contents of src/main.js:

// Import the React library, which is necessary for creating React components.
import React from "react";

// Import the ReactDOM library, which is responsible for rendering React components to the DOM.
import ReactDOM from "react-dom/client";

// Import the App component, which is the main component of the application.
import App from "./App";

// Render the App component inside the root element.
// The 'createRoot' method initializes a React application inside a given DOM node, in this case, the element with the ID of "root".
ReactDOM.createRoot(document.getElementById("root")).render(
  // React.StrictMode is a wrapper component that helps with highlighting potential problems in an application.
  // It does not render any visible UI. It activates additional checks and warnings for its descendants.
  <React.StrictMode>
    {/* The App component is rendered inside React.StrictMode, which will ensure that it follows best practices and highlights any issues. */}
    <App />
  </React.StrictMode>
);


Contents of src/App.js:

import React from "react";

// Main App component using JSX
export default function App() {
  return <h1>Hello, React!</h1>;
}


